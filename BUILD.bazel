load("@io_bazel_rules_docker//container:image.bzl", "container_image")
load("@io_bazel_rules_docker//python3:image.bzl", "py3_image")
load("@py_deps//:requirements.bzl", "requirement")
load("@rules_python//python:defs.bzl", "py_runtime_pair", "py_binary")


py_runtime(
    name = "python3_runtime",
    files = ["@python_interpreter//:files"],
    interpreter = "@python_interpreter//:python_bin",
    python_version = "PY3",
    visibility = ["//visibility:public"],
)

py_runtime_pair(
    name = "my_py_runtime_pair",
    py2_runtime = None,
    py3_runtime = ":python3_runtime",
)

toolchain(
    name = "my_py_toolchain",
    toolchain = ":my_py_runtime_pair",
    toolchain_type = "@bazel_tools//tools/python:toolchain_type",
)

py_binary(
    name = "demo",
    srcs = ["demo.py"],
    python_version = "PY3",
    deps = [
        requirement("dbt"),
        requirement("psycopg2-binary"),
    ],
)

container_image(
    name = "python3.8.3_base_image",
    base = "@python3.8.3_slim_buster//image",
    # slim-buster image places python3 under /usr/local/bin, but the host
    # toolchain used by py3_image might use /usr/bin instead.
    symlinks = {
        "/usr/bin/python": "/usr/local/bin/python",
        "/usr/bin/python3": "/usr/local/bin/python3",
    },
)

exports_files(["requirements.txt"])

py3_image(
    name = "dbt",
    base = ":python3.8.3_base_image",
    srcs = ["demo.py"],
    main = "demo.py",
    deps = [
        requirement("dbt"),
        requirement("psycopg2-binary"),
    ],
     # Bazel injected init files can break python import.
    # https://github.com/bazelbuild/rules_python/issues/55
    legacy_create_init = False,
)


# container_push(
#     name = "push",
#     format = "Docker",
#     image = ":container",
#     registry = "gcr.io",
#     repository = "example-service",
#     visibility = ["//visibility:public"],
# )
